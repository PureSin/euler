from Euler import factor
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

TODO: look into factor algorithm
check divisors_count algorithm
"""

def num_divisors(x):
    """returns the number of divisors of x"""
    l = factor(x)
    divisors = 1
    for exp in l:
        divisors *= exp[1]+1
    return divisors
    
if __name__=="__main__":    
    n = 1
    while True:
        num = n*(n+1) / 2
        if n % 2 ==0:
            divisors_count = num_divisors(n/2)*num_divisors(n+1)
        else:
            divisors_count = num_divisors(n)*num_divisors((n+1)/2)
        if divisors_count > 500:
            print num
            break
        n+=1